name: LaTeX to PDF

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build PDF
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3

      - name: Install texlive
        run: sudo apt install texlive-base

      - name: Install texlive-latex-extra
        run: sudo apt-get install texlive-latex-extra

      - name: Build pdf
        run: pdflatex -jobname resume main.tex

      - name: Upload PDF Artifact
        uses: actions/upload-artifact@v3
        with:
          name: resume
          path: resume.pdf

  deploy:
    name: Deploy PDF
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download PDF Artifact
        uses: actions/download-artifact@v3
        with:
          name: resume

      - name: Test artifact download
        run: ls -R

      - name: Check If Release Exists
        id: check_release
        run: |
          TAG_NAME="v1.0.0"
          RELEASE_ID=$(curl -s -X GET "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" | jq -r '.id')
          if [ -n "$RELEASE_ID" ]; then
            echo "::set-output name=release_exists::true"
          else
            echo "::set-output name=release_exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub Release
        id: create_or_update_release
        run: |
          TAG_NAME="v1.0.0"
          RELEASE_EXISTS="${{ steps.check_release.outputs.release_exists }}"
          if [ "$RELEASE_EXISTS" == "true" ]; then
            curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$TAG_NAME\"}"
          else
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/releases" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$TAG_NAME\"}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PDF Asset
        id: upload-release-asset
        run: |
          PDF_PATH="resume.pdf"
          TAG_NAME="v1.0.0"
          RELEASE_TOKEN="${{ secrets.RELEASE_TOKEN }}"
          UPLOAD_URL=$(curl -X GET "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" -H "Authorization: token $RELEASE_TOKEN" | jq -r '.upload_url' | sed -e 's/{.*}//')
          curl -X POST "$UPLOAD_URL?name=$PDF_PATH" -H "Authorization: token $RELEASE_TOKEN" -H "Content-Type: application/pdf" --data-binary "@$PDF_PATH"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# name: LateX to PDF

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build_pdf:
#     name: Build project
#     runs-on: ubuntu-latest
#     steps:

#       - name: Set up Git repository
#         uses: actions/checkout@v3

#       - name: Install texlive
#         run: sudo apt install texlive-base

#       - name: Install texlive-latex-extra
#         run: sudo apt-get install texlive-latex-extra

#       - name: Build pdf
#         run: pdflatex -jobname resume main.tex

#       - name: Upload PDF file
#         uses: actions/upload-artifact@v3
#         with:
#           name: resume
#           path: resume.pdf

#   release_pdf:
#     name: Release project
#     runs-on: ubuntu-latest
#     needs: build_pdf
#     steps:

#       - name: Download artifact
#         uses: actions/download-artifact@v3
#         with:
#           name: resume

#       - name: Test artifact download
#         run: ls -R

#   deploy_pdf:
#     name: Commit and push pdf
#     runs-on: ubuntu-latest
#     needs: release_pdf
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: configure git
#         run: |
#           git config --local user.email "actions@github.com"
#           git config --local user.name "GitHub Actions"

#       - name: commit and push PDF
#         run: |
#           mv resume/resume.pdf .
#           git add resume.pdf
#           git commit -m "Add built PDF"
#           git push
# deploy_pdf:
#   name: Commit to repository
#   runs-on: ubuntu-latest
#   needs: release_pdf
#   steps:

#     - name: Commit to orphan branch
#       run: |
#         git checkout --orphan pdflatex
#         git rm -rf .
#         git add *.pdf
#         git -c user.name='GitHub Action' -c user.email='action@github.com' commit -m "Built paper"

#     - name: Push changes
#       uses: ad-m/github-push-action@master
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         branch: pdflatex
#         force: true
# - name: Set version as short sha
#   run: echo "VERSION=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

# - name: Get asset name
#   run: echo "RESUME_NAME=resume.pdf" >> $GITHUB_ENV

# - name: Create release
#   id: create_release
#   uses: actions/create-release@v1
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   with:
#     tag_name: ${{ env.VERSION }}
#     release_name: Release ${{ env.VERSION }}
#     draft: false
#     prerelease: false

# - name: Upload pdf
#   id: upload-release-pdf
#   uses: actions/upload-release-asset@v1
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   with:
#     upload_url: ${{ steps.create_release.outputs.upload_url }}
#     asset_path: ${{ env.RESUME_TARGET }}
#     asset_name: ${{ env.RESUME_NAME }}
#     asset_content_type: application/pdf
